axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE),
zlim=c(0,max(mat))
);
colNum = ncol(DTT)
matSum <- matrix(DTT[, D := rowSums(.SD), .SDcols = 1:colNum]$D,nrow = sizeX,ncol = sizeX)
matSum = matSum/colNum
print(hist(matSum))
image(
t(matSum),
axes = FALSE,
useRaster = TRUE,
asp=1,
col = hcl.colors(24, "YlOrRd", rev = TRUE),
zlim=c(0,max(matSum))
);
step = round(colNum/10);
#cherche le max pour meme couleurs images
maxMatTime = 0
iprev = 1;
for(i in seq(1+step,colNum,step)){
matTime <- matrix(DTT[, D := rowSums(.SD), .SDcols = iprev:i]$D,nrow = sizeX,ncol = sizeX)
print(range(matTime))
maxMatTime = max(maxMatTime,max(matTime));
iprev = i+1
}
iprev = 1;
for(i in seq(1+step,colNum,step)){
matTime <- matrix(DTT[, D := rowSums(.SD), .SDcols = iprev:i]$D, nrow = sizeX, ncol = sizeX)
image(
t(matTime),
axes = FALSE,
useRaster = TRUE,
asp=1,
zlim=c(0,maxMatTime)
)
iprev = i+1
}
}
```
## Entropy chromosomes
```{r entropy zones, echo=TRUE}
show_entropy("entropy_zones.csv")
```
## Entropy modules
```{r entropy modules, echo=FALSE}
show_entropy("entropy_modules.csv")
```
```{r pressure, echo=FALSE}
# DT <- as.data.table(read.csv("data_moy.csv", header = FALSE,sep=";"))
# DTT <- transpose(DT[,V1:=NULL])
# #hist(DTT[[20]])
# boxplot.matrix(as.matrix(DTT))
#
#   DT <- as.data.table(read.csv("data_big.csv", header = FALSE,sep=";"))
#   DTT <- transpose(DT[,V1:=NULL])
#   mat <- as.matrix(DTT)
#   image(
#       t(mat),
#       axes = FALSE,
#       useRaster = TRUE
#   )
#
# dt.m = melt(DT)
#
#
# ggplot(dt.m, aes(variable, V1,fill=value)) + geom_tile(colour = "white")
# + scale_fill_gradient(low = "white",
#      high = "steelblue")
#
#
#
# oldpar <- par(mar = rep(0.2, 4)) # reducing plot margins
# image(
#     t(mat), # image() has some weird opinions about how your matrix will be plotted
#     axes = TRUE,
#     useRaster = TRUE,
#     col = colorRampPalette(c("white", "darkorange", "black"))(30), # our colour palette
#     breaks = c(seq(0, 3, length.out = 30), 100) # colour-to-value mapping
#
# )
```
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
require(data.table)
library(ggplot2)
library(magrittr)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE),
zlim=c(0,max(mat))
)
max(mat)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
#install.packages("data.table")
#install.packages("plyr")
library(data.table)
library(plyr)
library(ggplot2)
require(data.table)
load_data <- function(DTGame, name){
#name = "Alex DLSKQ"
#age = 21
#sexe = 1
filename = paste(name, "_log.csv", sep="")
DT <- as.data.table(read.csv(filename, header = TRUE,sep=";"))
DT$step = as.numeric(DT$step)
DT = DT[order(step)]
DT$idPlayer = name
DT$fail = 1-DT$win
DT <- DT[, sexe:=as.character(sexe)]
DT$TimeNorm = as.numeric(as.POSIXct(DT$Time)) - as.numeric(as.POSIXct(DT[1]$Time))
DT$variation.Model = 0
DT$step = as.numeric(1:nrow(DT))
variationTotale = 0
for( i in 2:nrow(DT)){
beta0i = DT[i]$beta0
beta1i = DT[i]$beta1
delta = 0
nb = 0
diffVals = seq(0,1,0.05)
for(j in 1:3){
if(i > j){
beta0iprev = DT[i-j]$beta0
beta1iprev = DT[i-j]$beta1
for (x in diffVals)
delta = delta + (1/(1+exp(-(beta0i+beta1i*x))) - 1/(1+exp(-(beta0iprev+beta1iprev*x))))^2
nb = nb + 1
}
}
if(nb > 0)
delta = delta / nb
DT[i]$variation.Model = sqrt(delta/length(diffVals))
variationTotale = variationTotale + sqrt(delta/length(diffVals))
}
DT$variation.Model.Total = variationTotale / (nrow(DT)-1)
#temps en premier courbe
# DT$TimeInFirstCond = nrow(DT)
# for( i in 2:nrow(DT)){
#   if(DT[i]$curve != DT[i-1]$curve)
#   {
#     DT$TimeInFirstCond = i
#     break
#   }
#
# }
DT$TimePlayed = max(DT$TimeNorm)
DT$IsInFirstCond = 1
DT$LastCond = "none"
inFirstCond = 1;
for( i in 2:nrow(DT)){
if(DT[i]$curve != DT[i-1]$curve)
{
inFirstCond = 0;
DT$LastCond = DT[i]$curve
}
DT[i]$IsInFirstCond = inFirstCond
}
DT$FirstCond = DT[1]$curve
DT = DT[IsInFirstCond == 1]
DT$TimeInSecond = DT$TimePlayed - max(DT$TimeNorm)
DT$qualite.modele = nrow(DT[log.reg.error!="OK"])/nrow(DT)
if(DT$TimePlayed < 1100)
DT$abandon = "True"
if(ncol(DTGame) != 0)
DT <- merge(DTGame,DT, all=TRUE)
return(DT)
}
DTGeq <- data.table()
DTGeq <- as.data.table(read.csv(file = "GEQ.csv", header = TRUE,sep=","))
DTGeq_score = DTGeq[,.(DTGeq$nom,
Competence = DTGeq$competence + DTGeq$competence.1 + DTGeq$competence.2 + DTGeq$competence.3 + DTGeq$competence.4,
Sensory = DTGeq$sensory + DTGeq$sensory.1 + DTGeq$sensory.2 + DTGeq$sensory.3 + DTGeq$sensory.4 + DTGeq$sensory.5,
Flow = DTGeq$flow + DTGeq$flow.1 + DTGeq$flow.2 + DTGeq$flow.3 + DTGeq$flow.4,
Tension = DTGeq$tension + DTGeq$tension.1 + DTGeq$tension.2,
Challenge = DTGeq$challenge + DTGeq$challenge.1 + DTGeq$challenge.2 + DTGeq$challenge.3 + DTGeq$challenge.4,
Negative = DTGeq$negative + DTGeq$negative.1 + DTGeq$negative.2 + DTGeq$negative.2,
Positive = DTGeq$positive + DTGeq$positive.1 + DTGeq$positive.2 + DTGeq$positive.3 + DTGeq$positive.4,
Moyenne = 0),
by=nom]
DTGeq_score$Moyenne = rowMeans(DTGeq_score[,3:9])*7/33
DTGeq_score = head(DTGeq_score, 67)
DTGeq_score <- DTGeq_score[, nom:=NULL]
hist(DTGeq_score$Competence,xlim=c(5,25), breaks = 15)
abline(v=mean(DTGeq_score$Competence),col="blue")
abline(v=15,col="black")
hist(DTGeq_score$Challenge,xlim=c(5,25), breaks = 15)
abline(v=mean(DTGeq_score$Challenge),col="blue")
abline(v=15,col="black")
hist(DTGeq_score$Sensory,xlim=c(6,30), breaks = 15)
abline(v=mean(DTGeq_score$Sensory),col="blue")
abline(v=18,col="black")
hist(DTGeq_score$Flow,xlim=c(5,25), breaks = 15)
abline(v=mean(DTGeq_score$Flow),col="blue")
abline(v=15,col="black")
hist(DTGeq_score$Tension,xlim=c(3,15), breaks = 15)
abline(v=mean(DTGeq_score$Tension),col="blue")
abline(v=9,col="black")
hist(DTGeq_score$Negative,xlim=c(4,20), breaks = 15)
abline(v=mean(DTGeq_score$Negative),col="blue")
abline(v=12,col="black")
hist(DTGeq_score$Positive,xlim=c(5,25), breaks = 15)
abline(v=mean(DTGeq_score$Positive),col="blue")
abline(v=15,col="black")
DTGame <- data.table()
DTGame <- load_data(DTGame,"Adrien")
DTGame <- load_data(DTGame,"Alex DLSKQ")
DTGame <- load_data(DTGame,"Alexandre")
DTGame <- load_data(DTGame,"alice")
DTGame <- load_data(DTGame,"Antoine")
DTGame <- load_data(DTGame,"Antonin")
DTGame <- load_data(DTGame,"Aurelien")
DTGame <- load_data(DTGame,"Axelle")
DTGame <- load_data(DTGame,"Baptiste")
DTGame <- load_data(DTGame,"BB")
DTGame <- load_data(DTGame,"Clara Toussaint")
DTGame <- load_data(DTGame,"Corentin")
DTGame <- load_data(DTGame,"Doryan")
DTGame <- load_data(DTGame,"Do_riant")
DTGame <- load_data(DTGame,"Edralos")
DTGame <- load_data(DTGame,"Emma L")
DTGame <- load_data(DTGame,"Felix")
DTGame <- load_data(DTGame,"Guilhem")
DTGame <- load_data(DTGame,"Guillaume")
DTGame <- load_data(DTGame,"Hugo")
DTGame <- load_data(DTGame,"JaguarPygmee")
DTGame <- load_data(DTGame,"Jean-Michel Chocobanane")
DTGame <- load_data(DTGame,"Jean")
DTGame <- load_data(DTGame,"Julia")
DTGame <- load_data(DTGame,"Julie")
DTGame <- load_data(DTGame,"kiki")
DTGame <- load_data(DTGame,"Laurent")
DTGame <- load_data(DTGame,"Laurianne")
DTGame <- load_data(DTGame,"Lilian")
DTGame <- load_data(DTGame,"lena morvan")
DTGame <- load_data(DTGame,"Leo2")
DTGame <- load_data(DTGame,"Leo")
DTGame <- load_data(DTGame,"Marion")
DTGame <- load_data(DTGame,"Masalirow")
DTGame <- load_data(DTGame,"Mathieu")
DTGame <- load_data(DTGame,"Matthieu")
DTGame <- load_data(DTGame,"Mikonow")
DTGame <- load_data(DTGame,"Minna")
DTGame <- load_data(DTGame,"Mogador")
DTGame <- load_data(DTGame,"Morgan")
DTGame <- load_data(DTGame,"Narumik")
DTGame <- load_data(DTGame,"NicolasZ")
DTGame <- load_data(DTGame,"Noe")
DTGame <- load_data(DTGame,"Pamphile")
DTGame <- load_data(DTGame,"Paul")
DTGame <- load_data(DTGame,"Pierre")
DTGame <- load_data(DTGame,"Pulu")
DTGame <- load_data(DTGame,"Rambar")
DTGame <- load_data(DTGame,"RedSPINE")
DTGame <- load_data(DTGame,"Remi Moreaux")
DTGame <- load_data(DTGame,"Samuel BUSSON")
DTGame <- load_data(DTGame,"ScRalP")
DTGame <- load_data(DTGame,"Simon")
DTGame <- load_data(DTGame,"Terry")
DTGame <- load_data(DTGame,"Theo")
DTGame <- load_data(DTGame,"Thomas")
DTGame <- load_data(DTGame,"Thea")
DTGame <- load_data(DTGame,"Theophile")
DTGame <- load_data(DTGame,"Tomskiev")
DTGame <- load_data(DTGame,"ToshNobody")
DTGame <- load_data(DTGame,"TOTH Benoit")
DTGame <- load_data(DTGame,"Ulysse")
DTGame <- load_data(DTGame,"Valentin")
DTGame <- load_data(DTGame,"Vavou")
DTGame <- load_data(DTGame,"victor")
DTGame <- load_data(DTGame,"Yannis")
DTGame <- load_data(DTGame,"Yann")
#outliers
b = boxplot.stats(DTGame$qualite.modele)
DTGame = DTGame[qualite.modele < b$stats[5]]
DTGameFirstCondByPlayer = DTGame[,.(age, TimeInFirstCond = max(TimeNorm), FirstCond = .SD[1]$FirstCond, TimePlayed, abandon), by=idPlayer]
DTGameFirstCondByPlayer
DTGameFirstCondByPlayer[,.(timeMean=mean(TimeInFirstCond),timeSd=sd(TimeInFirstCond), nb=.N,TimePlayed, abandon ),by=FirstCond]
DTGameFirstCondByPlayer = unique(DTGameFirstCondByPlayer)
mean(DTGameFirstCondByPlayer$TimePlayed)
DTTest <- data.table()
DTTest <- merge(x = DTGameFirstCondByPlayer, y = DTGeq_score, by.x = "idPlayer", by.y = "V1")
meanAge = mean(DTGameFirstCondByPlayer$age)
sdAge = sd(DTGameFirstCondByPlayer$age)
hist(DTGameFirstCondByPlayer$age)
abline(v=meanAge, col="blue")
my_wilcox<- function(vec1,vec2,str_var,str_cond1,str_cond2){
res = wilcox.test(vec1,
vec2,exact=FALSE,conf.int = TRUE)
cond = paste(str_cond1,paste("/",str_cond2))
cond = paste(paste(str_var,": "),cond)
if(res$p.value <= 0.05){
cond = paste(cond,"*")
if(res$p.value <= 0.01){
cond = paste(cond,"*")
}
boxplot(vec1,vec2,main=cond,names=c(str_cond1,str_cond2))
print(paste(paste(paste(cond," : p="),res$p.value),paste(" shift=",res$estimate)))
}
}
test_wilcox_firstcond <- function(cond1,cond2){
my_wilcox(DTTest[FirstCond==cond1]$Competence,
DTTest[FirstCond==cond2]$Competence,
"Competence",
cond1,cond2);
my_wilcox(DTTest[FirstCond==cond1]$Positive,
DTTest[FirstCond==cond2]$Positive,
"Positive",
cond1,cond2);
my_wilcox(DTTest[FirstCond==cond1]$Negative,
DTTest[FirstCond==cond2]$Negative,
"Negative",
cond1,cond2);
my_wilcox(DTTest[FirstCond==cond1]$Sensory,
DTTest[FirstCond==cond2]$Sensory,
"Sensory",
cond1,cond2);
my_wilcox(DTTest[FirstCond==cond1]$Tension,
DTTest[FirstCond==cond2]$Tension,
"Tension",
cond1,cond2);
my_wilcox(DTTest[FirstCond==cond1]$Challenge,
DTTest[FirstCond==cond2]$Challenge,
"Challenge",
cond1,cond2);
my_wilcox(DTTest[FirstCond==cond1]$Flow,
DTTest[FirstCond==cond2]$Flow,
"Flow",
cond1,cond2);
}
boxplot(DTTest[FirstCond=="Low"]$Competence,
DTTest[FirstCond=="LowPic"]$Competence,
DTTest[FirstCond=="Flow"]$Competence,
DTTest[FirstCond=="Pic"]$Competence,main="Competence",names=c("Low","LowPic","Flow","Pic"))
boxplot(DTTest[FirstCond=="Low"]$Positive,
DTTest[FirstCond=="LowPic"]$Positive,
DTTest[FirstCond=="Flow"]$Positive,
DTTest[FirstCond=="Pic"]$Positive,main="Positive",names=c("Low","LowPic","Flow","Pic"))
boxplot(DTTest[FirstCond=="Low"]$Negative,
DTTest[FirstCond=="LowPic"]$Negative,
DTTest[FirstCond=="Flow"]$Negative,
DTTest[FirstCond=="Pic"]$Negative,main="Negative",names=c("Low","LowPic","Flow","Pic"))
boxplot(DTTest[FirstCond=="Low"]$Sensory,
DTTest[FirstCond=="LowPic"]$Sensory,
DTTest[FirstCond=="Flow"]$Sensory,
DTTest[FirstCond=="Pic"]$Sensory,main="Sensory",names=c("Low","LowPic","Flow","Pic"))
boxplot(DTTest[FirstCond=="Low"]$Tension,
DTTest[FirstCond=="LowPic"]$Tension,
DTTest[FirstCond=="Flow"]$Tension,
DTTest[FirstCond=="Pic"]$Tension,main="Tension",names=c("Low","LowPic","Flow","Pic"))
boxplot(DTTest[FirstCond=="Low"]$Challenge,
DTTest[FirstCond=="LowPic"]$Challenge,
DTTest[FirstCond=="Flow"]$Challenge,
DTTest[FirstCond=="Pic"]$Challenge,main="Challenge",names=c("Low","LowPic","Flow","Pic"))
boxplot(DTTest[FirstCond=="Low"]$Flow,
DTTest[FirstCond=="LowPic"]$Flow,
DTTest[FirstCond=="Flow"]$Flow,
DTTest[FirstCond=="Pic"]$Flow,main="Flow",names=c("Low","LowPic","Flow","Pic"))
test_wilcox_firstcond("Flow","Pic");
test_wilcox_firstcond("Flow","Low");
test_wilcox_firstcond("Flow","LowPic");
test_wilcox_firstcond("Pic","Low");
test_wilcox_firstcond("Pic","LowPic");
test_wilcox_firstcond("Low","LowPic");
#affiche
DTGameFirstCondByPlayer
DTGameFirstCondByPlayer[,.(timeMean=mean(TimeInFirstCond),timeSd=sd(TimeInFirstCond), nb=.N),by=FirstCond]
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="Pic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Flow"]$TimeInFirstCond)
print(paste("Pic/Flow",res$p.value))
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="Low"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Flow"]$TimeInFirstCond)
print(paste("Low/Flow",res$p.value))
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="LowPic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Flow"]$TimeInFirstCond)
print(paste("LowPic/Flow",res$p.value))
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="Pic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Low"]$TimeInFirstCond)
print(paste("Pic/Low",res$p.value))
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="LowPic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Pic"]$TimeInFirstCond)
print(paste("LowPic/Pic",res$p.value))
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="LowPic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Low"]$TimeInFirstCond)
print(paste("LowPic/Low",res$p.value))
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="Low" | FirstCond=="Flow"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="LowPic"| FirstCond=="Pic"]$TimeInFirstCond)
print(paste("base/pic",res$p.value))
res = wilcox.test(DTGameFirstCondByPlayer[FirstCond=="Low" | FirstCond=="LowPic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="FlowPic"| FirstCond=="Pic"]$TimeInFirstCond)
print(paste("0.2/0.5",res$p.value))
boxplot(DTGameFirstCondByPlayer[FirstCond=="Flow"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Low"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="LowPic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Pic"]$TimeInFirstCond, names = c("Flow","Low","LowPeaks","FlowPeaks"))
boxplot(DTGameFirstCondByPlayer[FirstCond=="Low" | FirstCond=="Flow"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="LowPic"| FirstCond=="Pic"]$TimeInFirstCond, names = c("Curves without Peaks", "Curves with Peaks"))
boxplot(DTGameFirstCondByPlayer[FirstCond=="Low" | FirstCond=="LowPic"]$TimeInFirstCond,
DTGameFirstCondByPlayer[FirstCond=="Flow"| FirstCond=="Pic"]$TimeInFirstCond, names = c("Low difficulty curves", "High difficulty curves"))
#install.packages("data.table")
#install.packages("plyr")
library(data.table)
library(plyr)
library(ggplot2)
require(data.table)
load_data <- function(DTGame, name){
#name = "Alex DLSKQ"
#age = 21
#sexe = 1
filename = paste(name, "_log.csv", sep="")
DT <- as.data.table(read.csv(filename, header = TRUE,sep=";"))
DT$step = as.numeric(DT$step)
DT = DT[order(step)]
DT$idPlayer = name
DT$fail = 1-DT$win
DT <- DT[, sexe:=as.character(sexe)]
DT$TimeNorm = as.numeric(as.POSIXct(DT$Time)) - as.numeric(as.POSIXct(DT[1]$Time))
DT$variation.Model = 0
DT$step = as.numeric(1:nrow(DT))
variationTotale = 0
for( i in 2:nrow(DT)){
beta0i = DT[i]$beta0
beta1i = DT[i]$beta1
delta = 0
nb = 0
diffVals = seq(0,1,0.05)
for(j in 1:3){
if(i > j){
beta0iprev = DT[i-j]$beta0
beta1iprev = DT[i-j]$beta1
for (x in diffVals)
delta = delta + (1/(1+exp(-(beta0i+beta1i*x))) - 1/(1+exp(-(beta0iprev+beta1iprev*x))))^2
nb = nb + 1
}
}
if(nb > 0)
delta = delta / nb
DT[i]$variation.Model = sqrt(delta/length(diffVals))
variationTotale = variationTotale + sqrt(delta/length(diffVals))
}
DT$variation.Model.Total = variationTotale / (nrow(DT)-1)
#temps en premier courbe
# DT$TimeInFirstCond = nrow(DT)
# for( i in 2:nrow(DT)){
#   if(DT[i]$curve != DT[i-1]$curve)
#   {
#     DT$TimeInFirstCond = i
#     break
#   }
#
# }
DT$TimePlayed = max(DT$TimeNorm)
DT$IsInFirstCond = 1
DT$LastCond = "none"
inFirstCond = 1;
for( i in 2:nrow(DT)){
if(DT[i]$curve != DT[i-1]$curve)
{
inFirstCond = 0;
DT$LastCond = DT[i]$curve
}
DT[i]$IsInFirstCond = inFirstCond
}
DT$FirstCond = DT[1]$curve
DT = DT[IsInFirstCond == 1]
DT$TimeInSecond = DT$TimePlayed - max(DT$TimeNorm)
DT$qualite.modele = nrow(DT[log.reg.error!="OK"])/nrow(DT)
if(DT$TimePlayed < 1100)
DT$abandon = "True"
if(ncol(DTGame) != 0)
DT <- merge(DTGame,DT, all=TRUE)
return(DT)
}
DTGeq <- data.table()
DTGeq <- as.data.table(read.csv(file = "GEQ.csv", header = TRUE,sep=","))
DTGeq_score = DTGeq[,.(DTGeq$nom,
Competence = DTGeq$competence + DTGeq$competence.1 + DTGeq$competence.2 + DTGeq$competence.3 + DTGeq$competence.4,
Sensory = DTGeq$sensory + DTGeq$sensory.1 + DTGeq$sensory.2 + DTGeq$sensory.3 + DTGeq$sensory.4 + DTGeq$sensory.5,
Flow = DTGeq$flow + DTGeq$flow.1 + DTGeq$flow.2 + DTGeq$flow.3 + DTGeq$flow.4,
Tension = DTGeq$tension + DTGeq$tension.1 + DTGeq$tension.2,
Challenge = DTGeq$challenge + DTGeq$challenge.1 + DTGeq$challenge.2 + DTGeq$challenge.3 + DTGeq$challenge.4,
Negative = DTGeq$negative + DTGeq$negative.1 + DTGeq$negative.2 + DTGeq$negative.2,
Positive = DTGeq$positive + DTGeq$positive.1 + DTGeq$positive.2 + DTGeq$positive.3 + DTGeq$positive.4,
Moyenne = 0),
by=nom]
DTGeq_score = DTGeq[,.(DTGeq$nom,
Competence = DTGeq$competence + DTGeq$competence.1 + DTGeq$competence.2 + DTGeq$competence.3 + DTGeq$competence.4,
Sensory = DTGeq$sensory + DTGeq$sensory.1 + DTGeq$sensory.2 + DTGeq$sensory.3 + DTGeq$sensory.4 + DTGeq$sensory.5,
Flow = DTGeq$flow + DTGeq$flow.1 + DTGeq$flow.2 + DTGeq$flow.3 + DTGeq$flow.4,
Tension = DTGeq$tension + DTGeq$tension.1 + DTGeq$tension.2,
Challenge = DTGeq$challenge + DTGeq$challenge.1 + DTGeq$challenge.2 + DTGeq$challenge.3 + DTGeq$challenge.4,
Negative = DTGeq$negative + DTGeq$negative.1 + DTGeq$negative.2 + DTGeq$negative.2,
Positive = DTGeq$positive + DTGeq$positive.1 + DTGeq$positive.2 + DTGeq$positive.3 + DTGeq$positive.4,
Moyenne = 0),
by=nom]
DTGeq <- as.data.table(read.csv(file = "GEQ.csv", header = TRUE,sep=","))
