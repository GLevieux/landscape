knitr::opts_chunk$set(echo = TRUE)
library(data.table)
require(data.table)
library(ggplot2)
library(magrittr)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
print(paste("Nb fails: ",length(mat[mat < -1000])))
#on enleveles -inf on les met au min
mat[mat < -1000] <- min(mat[mat > -1000])
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
View(mat)
View(mat)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
View(mat)
View(DTT)
View(DTT)
View(DT)
mat[mat < -1000]
mat
matColMean = colMeans(mat)
plot(matColMean)
matColMean
View(mat)
plot(matColMean)
plot(matColMean)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
#on enleveles -inf on les met au min
nbValFail = length(mat[mat < -1000])
mat[mat < -1000] <- min(mat[mat > -1000])
matColMean = colMeans(mat)
plot(matColMean)
plot(matColMean)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
#on enleveles -inf on les met au min
nbValFail = length(mat[mat < -1000])
mat[mat < -1000] <- NA
matColMean = colMeans(mat)
plot(matColMean)
View(mat)
matColMean = colMeans(mat,na_rm=TRUE)
matColMean = colMeans(mat,na_rm="TRUE")
matColMean = colMeans(mat,na.rm=TRUE)
plot(matColMean)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
#on enleveles -inf on les met au min
nbValFail = length(mat[mat < -1000])
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
mat[mat < -1000] <- NA
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
matDraw <- (mat[is.na] = min(mat))
matDraw <- (mat[is.na] = min(mat))
matDraw <- apply(matDraw,2,sort, decreasing=FALSE)
mat[mat < -1000] <- NA
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
#on enleveles -inf on les met au min
nbValFail = length(mat[mat < -1000])
mat[mat < -1000] <- NA
matColMean = colMeans(mat,na.rm=TRUE)
plot(matColMean)
matDraw <- (mat[is.na] = min(mat))
matDraw <- (mat[is.na(mat)] = min(mat))
matDraw <- apply(matDraw,2,sort, decreasing=FALSE)
matDraw
mat[is.na(mat)]
min(mat)
matDraw <- (mat[is.na(mat)] = min(not is.na(mat)))
matDraw <- (mat[is.na(mat)] = min(! is.na(mat)))
min(! is.na(mat))
matDraw <- (mat[is.na(mat)] = min(mat[!is.na(mat)]))
min(mat[!is.na(mat)])
mat <- as.matrix(DTT)
min(mat)
mat[mat < -1000] <- NA
min(mat)
min(mat[!is.na(mat)])
#on enleveles -inf on les met au min
nbValFail = length(mat[mat < -1000])
mat[mat < -1000] <- NA
matColMean = colMeans(mat,na.rm=TRUE)
plot(matColMean)
matDraw <- (mat[is.na(mat)] = min(mat[!is.na(mat)]))
min(mat[!is.na(mat)])
matDraw <- apply(matDraw,2,sort, decreasing=FALSE)
matDraw
mat[is.na(mat)] = min(mat[!is.na(mat)])
matDraw <- mat
matDraw <- apply(matDraw,2,sort, decreasing=FALSE)
matDraw <- mat
matDraw[is.na(matDraw)] = min(matDraw[!is.na(matDraw)])
matDraw <- apply(matDraw,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
image(
t(matDraw),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
plot(matColMean)
loadEntropy <- function(filename){
DT <- as.data.table(read.csv(filename, header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
return(DTT)
}
show_entropy <- function(DT){
mat <- as.matrix(DT)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
);
}
show_entropy2 <- function(DT){
mat <- as.matrix(DT)
size = dim(mat)[1]
sizeX = sqrt(size) #map carrée
colNum = ncol(DT)
matSum <- matrix(DTT[, D := rowSums(.SD), .SDcols = 1:colNum]$D,nrow = sizeX,ncol = sizeX)
matSum = matSum/colNum
print(hist(matSum))
image(
t(matSum),
axes = FALSE,
useRaster = TRUE,
asp=1,
col = hcl.colors(24, "YlOrRd", rev = TRUE),
zlim=c(0,max(matSum))
);
step = round(colNum/10);
#cherche le max pour meme couleurs images
maxMatTime = 0
minMatTime = 100000000
iprev = 1;
for(i in seq(1+step,colNum,step)){
matTime <- matrix(DTT[, D := rowSums(.SD), .SDcols = iprev:i]$D,nrow = sizeX,ncol = sizeX)
print(range(matTime))
maxMatTime = max(maxMatTime,max(matTime));
minMatTime = min(maxMatTime,min(matTime));
iprev = i+1
}
iprev = 1;
for(i in seq(1+step,colNum,step)){
matTime <- matrix(DTT[, D := rowSums(.SD), .SDcols = iprev:i]$D, nrow = sizeX, ncol = sizeX)
image(
t(matTime),
axes = FALSE,
useRaster = TRUE,
asp=1,
zlim=c(0,maxMatTime)
)
iprev = i+1
}
}
DT = loadEntropy("entropy_zones.csv")
show_entropy("entropy_zones.csv")
mat <- as.matrix(DT)
```{r entropy_load function, echo=FALSE}
loadEntropy <- function(filename){
DT <- as.data.table(read.csv(filename, header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
return(DTT)
}
DT = loadEntropy("entropy_zones.csv")
mat <- as.matrix(DT)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
);
DT = loadEntropy("entropy_zones.csv")
show_entropy("entropy_zones.csv")
show_entropy(DT)
matColMean = colMeans(mat)
plot(matColMean)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
);
DT = loadEntropy("entropy_zones.csv")
dim(DT)
show_entropy_moy(DT)
DT = loadEntropy("entropy_zones.csv")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
require(data.table)
library(ggplot2)
library(magrittr)
DT <- as.data.table(read.csv("fitness.csv", header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
mat <- as.matrix(DTT)
#on enleveles -inf on les met à NA
nbValFail = length(mat[mat < -1000])
matMoy = mat
matMoy[matMoy < -1000] <- NA
matColMean = colMeans(matMoy,na.rm=TRUE)
plot(matColMean)
nbValFail = length(mat[mat < -1000])
matDraw <- mat
matDraw[mat < -1000] = min(matDraw[mat > -1000])
matDraw <- apply(matDraw,2,sort, decreasing=FALSE)
image(
t(matDraw),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
)
loadEntropy <- function(filename){
DT <- as.data.table(read.csv(filename, header = FALSE,sep=";"))
DTT <- transpose(DT[,V1:=NULL])
return(DTT)
}
show_entropy_moy <- function(DT){
mat <- as.matrix(DT)
matColMean = colMeans(mat)
plot(matColMean)
}
show_entropy_detail <- function(DT){
mat <- as.matrix(DT)
mat <- apply(mat,2,sort, decreasing=FALSE)
image(
t(mat),
axes = FALSE,
useRaster = TRUE,
col = hcl.colors(24, "YlOrRd", rev = TRUE)
);
}
show_entropy_map <- function(DT){
mat <- as.matrix(DT)
size = dim(mat)[1]
sizeX = sqrt(size) #map carrée
colNum = ncol(DT)
matSum <- matrix(DT[, D := rowSums(.SD), .SDcols = 1:colNum]$D,nrow = sizeX,ncol = sizeX)
print("Histogramme de l'entropie moyenne")
matMoy = matSum/colNum
hist(matMoy)
print("Entropie moyenne projetée sur la carte")
image(
t(matSum),
axes = FALSE,
useRaster = TRUE,
asp=1,
col = hcl.colors(24, "YlOrRd", rev = TRUE),
zlim=c(0,max(matSum))
);
nbSteps = 5
step = round(colNum/nbSteps);
print(paste(paste("Entropie moyenne projetée sur la carte tous les ", step), " epoch"))
#cherche le max pour meme couleurs images
maxMatTime = 0
iprev = 1;
for(i in seq(1+step,colNum,step)){
matTime <- matrix(DT[, D := rowSums(.SD), .SDcols = iprev:i]$D,nrow = sizeX,ncol = sizeX)
maxMatTime = max(maxMatTime,max(matTime));
iprev = i+1
}
iprev = 1;
for(i in seq(1+step,colNum,step)){
matTime <- matrix(DT[, D := rowSums(.SD), .SDcols = iprev:i]$D, nrow = sizeX, ncol = sizeX)
image(
t(matTime),
axes = FALSE,
useRaster = TRUE,
asp=1,
zlim=c(0,maxMatTime)
)
iprev = i+1
}
}
DT = loadEntropy("entropy_zones.csv")
show_entropy_moy(DT)
show_entropy_moy(DT)
show_entropy_detail(DT)
show_entropy_moy(DT)
show_entropy_map(DT)
show_entropy_moy(DT)
DT = loadEntropy("entropy_zones.csv")
DT = loadEntropy("entropy_zones.csv")
show_entropy_moy(DT)
show_entropy_detail(DT)
show_entropy_map(DT)
show_entropy_moy(DT)
DT = loadEntropy("entropy_zones.csv")
show_entropy_moy(DT)
mat <- as.matrix(DT)
size = dim(mat)[1]
sizeX = sqrt(size) #map carrée
colNum = ncol(DT)
matSum <- matrix(DT[, D := rowSums(.SD), .SDcols = 1:colNum]$D,nrow = sizeX,ncol = sizeX)
print("Histogramme de l'entropie moyenne")
matMoy = matSum/colNum
hist(matMoy)
show_entropy_moy(DT)
DT[, D := rowSums(.SD), .SDcols = 1:colNum]$D
View(DT)
DT$D
colNum = ncol(DT)
DT = loadEntropy("entropy_zones.csv")
colNum = ncol(DT)
colNum
DT[, D := rowSums(.SD), .SDcols = 1:colNum]
ncol(DT)
DT = loadEntropy("entropy_zones.csv")
colNum = ncol(DT)
colNum
DT[, .(D = rowSums(.SD)), .SDcols = 1:colNum]
ncol(DT)
matSum <- matrix(DT[, .(D = rowSums(.SD)), .SDcols = 1:colNum]$D,nrow = sizeX,ncol = sizeX)
DT$D
matSum
